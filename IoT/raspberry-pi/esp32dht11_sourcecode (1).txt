#include <WiFi.h>
#include <PubSubClient.h>
#include <DHT.h>

//ESP32 PIN정의 
#define DHTPIN 22 	//ESP32에 연결된 센서 데이터 전달 핀번호
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

//ESP32 Wifi 및 변수 정의 
const char *ssid =  "iptime";   //공유기 SSID값 변경
const char *password =  "";   	//공유기 WIFI 비번 변경
 
const char* ID = "ESP32DHT11";  //ESP32+pi번호
const char* TOPIC1 = "esp32/temper";
const char* TOPIC2 = "esp32/hum";
const char* mqttUser = "";		//MQTT인증이 있을 경우 아이디
const char* mqttPassword = "";	//MQTT인증이 있을 경우 비번
const char* broker = "192.168.0.76"; 	//MQTT브로커 IP
 
WiFiClient wclient;
PubSubClient client(wclient); 
char messages[50];
 
// 와이파이 네트워크에 접속하기 위한 코드
void setup_wifi() {
  Serial.print("\nConnecting to ");
  Serial.println(ssid);
 
  WiFi.begin(ssid, password); 
  while (WiFi.status() != WL_CONNECTED) { 
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("WiFi connected");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());
}
 
//MQTT브로커로 데이터를 전달하기 위한 코드
void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Received messages: ");
  Serial.print("None");
  for(int i=0; i<length; i++){
    Serial.println((char) payload[i]);
  }
  Serial.println();
}
 
 
// MQTT브로커 연결이 끊어졌을 때 재시도를 위한 코드
void reconnect() {
  // Loop until reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Attempt to connect
    if (client.connect(ID, mqttUser, mqttPassword)) {
      Serial.println("connected");
      Serial.print("Publishing to: ");
      Serial.println(TOPIC1);
      Serial.println('\n');
 
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println("\n try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

//온습도센서에서 데이터 받아서 전달하는 코드 / 센서가 바뀔경우 여기서 부터 변경 
void setup() {
  Serial.begin(115200); 
  delay(100);
  dht.begin();
  setup_wifi(); // Connect to network
  client.setServer(broker, 1883);
  client.setCallback(callback);
}
 
void loop() {
  if (!client.connected()){
    reconnect();
  }
  client.loop();
  float humi = dht.readHumidity();
  float temp = dht.readTemperature();
  snprintf(messages, 75, "%.1f", temp);
  client.publish(TOPIC1, messages);
  snprintf(messages, 75, "%.1f", humi);
  client.publish(TOPIC2, messages);
  delay(1000);
  
}