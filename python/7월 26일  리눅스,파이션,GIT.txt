7월 26일  리눅스,파이션,GIT

python 저장된 파일 찾기 -   explorer.exe . 

git - 마크다운, 온라인 마크다운 에디터, D2 코딩을 통해 갈끔하기 정리가능 
역 /은 \돈 모양이다 .

-연산자
first = int(input("첫 번째 정수 : "))
secound = int(input("두 번째 정수: "))

print("{} + {} = {}".format(first, secound, (first + secound)))
print("{} - {} = {}".format(first, secound, (first - secound)))
print("{} * {} = {}".format(first, secound, (first * secound)))
print("{} / {} = {}".format(first, secound, (first / secound)))
print("{} % {} = {}".format(first, secound, (first % secound)))
print("{} ** {} = {}".format(first, secound, (first ** secound)))


#산술 연산자 : 수와 수를 연산해서 결과가 수렴 연산


결과 값 
첫 번째 정수 : 5
두 번째 정수: 5
5 + 5 = 10
5 - 5 = 0
5 * 5 = 25
5 / 5 = 1.0
5 % 5 = 0
5 ** 5 = 3125

-shift 연산
first = int(input("첫 번째 정수 : "))
secound =int(input("두번째 정수 : "))


print("{} << {} = {}".format(first, secound, (first + secound)))
print("{} >> {} = {}".format(first, secound, (first - secound)))

#shift 연산은 곱하기 2의 몇 승 혹으 나누기 몇승과 같다

결과 값 
첫 번째 정수 : 8
두번째 정수 : 4
8 << 4 = 12
8 >> 4 = 4

---bit연산
a =6
b = 5 
print("{} & {} = {}".format(a, b, (a&b)))
print("{} ^ {} = {}".format(a, b, (a^b)))
print("{} | {} = {}".format(a, b, (a|b)))

# & = bit끼리 and연산 - 둘중 하나라도 0이면 0
# ^  = bit끼리 
# | (\에서의 shifr) =  bit끼리 

 
--relative 연산 
first = int(input("첫 번째 정수 : "))
secound =int(input("두번째 정수 : "))
print("{} > {} = {}".format(first, secound, (first - secound)))
print("{} >= {} = {}".format(first, secound, (first - secound)))
print("{} < {} = {}".format(first, secound, (first - secound)))
print("{} <= {} = {}".format(first, secound, (first - secound)))
print("{} == {} = {}".format(first, secound, (first - secound)))
print("{} != {} = {}".format(first, secound, (first - secound)))

#비교 혹은 관계 연산자
# 두 수의 대소 동등 관계를 계산하는 연산

--논리연산  logical 

logicValOne = True
logicValTwo = False

logicValOne = bool(input("빈문자열은 False 아니면 True"))
logicValTwo = bool(input("빈문자열은 False 아니면 True"))

print("{}   {}".format(logicValOne, logicValTwo))
print("logicValOne = {} not logicValOne = {}".format(logicValOne,(not logicValOne)))
print("{} and {} = {}".format(logicValOne, logicValTwo, (logicValOne and logicValTwo)))
print("{} or {} = {}".format(logicValOne, logicValTwo, (logicValOne or logicValTwo)))


# 논리 연산자는 논리 값을 연산해서 논리값을 리턴하는 연산자
#입력은 True 혹은 False로 해야함 
#bool함수는 빈문자열을 false로 아무 문자나 없으면 true로 반환한다. 


git - 마크다운, 온라인 마크다운 에디터, D2 코딩을 통해 갈끔하기 정리가능 
